{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","onSave","useState","name","setName","number","setNumber","handlerChange","event","target","value","className","s","form","onSubmit","e","preventDefault","newContact","id","uuidv4","label","type","input","pattern","title","required","onChange","button","Filter","filter","container","ContactList","list","deleteContact","map","tel","replace","item","href","onClick","App","state","contacts","setState","onSaveContact","newContactName","toUpperCase","find","alert","prevState","visibleContacts","search","contact","includes","deleteID","currentTarget","dataset","localContacts","localStorage","getItem","parsContacts","JSON","parse","this","prevProps","setItem","stringify","contactsList","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.faa17d83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactForm.module.css\";\n\nfunction ContactForm({ onSave }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handlerChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const onSaveContact = (e) => {\n    e.preventDefault();\n\n    const newContact = { id: uuidv4(), name, number };\n\n    setName(\"\");\n    setNumber(\"\");\n\n    onSave(newContact);\n  };\n\n  return (\n    <form className={s.form} onSubmit={onSaveContact}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          className={s.input}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handlerChange}\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          className={s.input}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handlerChange}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class OldContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   handlerChange = (event) => {\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//     });\n//   };\n\n//   onSaveContact = (event) => {\n//     event.preventDefault();\n\n//     const newContact = {\n//       id: uuidv4(),\n//       name: this.state.name,\n//       number: this.state.number,\n//     };\n\n//     this.setState({\n//       name: \"\",\n//       number: \"\",\n//     });\n\n//     this.props.onSave(newContact);\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className={s.form} onSubmit={this.onSaveContact}>\n//         <label className={s.label}>\n//           Name\n//           <input\n//             type=\"text\"\n//             className={s.input}\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={name}\n//             onChange={this.handlerChange}\n//           />\n//         </label>\n\n//         <label className={s.label}>\n//           Number\n//           <input\n//             type=\"tel\"\n//             className={s.input}\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             value={number}\n//             onChange={this.handlerChange}\n//           />\n//         </label>\n\n//         <button className={s.button} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nContactForm.propTypes = {\n  onSave: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\n\nfunction Filter({ filter, handlerChange }) {\n  return (\n    <section className={s.container}>\n      <label>\n        Find contact by name\n        <input\n          type=\"text\"\n          className={s.input}\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={filter}\n          onChange={handlerChange}\n        />\n      </label>\n    </section>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  handlerChange: PropTypes.func,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport { IoCloseCircleSharp } from \"react-icons/io5\";\nimport s from \"./ContactList.module.css\";\n\nfunction ContactList({ list, deleteContact }) {\n  return (\n    <ul className={s.list}>\n      {list.map(({ id, name, number }) => {\n        const tel = `tel:` + number.replace(/^(\\+)|\\D/g, \"$1\");\n        return (\n          <li className={s.item} key={id}>\n            <p>\n              {name}: <a href={tel}>{number}</a>\n            </p>\n            <button\n              className={s.button}\n              type=\"button\"\n              data-id={id}\n              onClick={deleteContact}\n            >\n              <IoCloseCircleSharp />\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object),\n  deleteContact: PropTypes.func,\n};\n\nexport default ContactList;\n","import React, { Component } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const localContacts = localStorage.getItem(\"phonebook\");\n    const parsContacts = JSON.parse(localContacts);\n    if (parsContacts) {\n      this.setState({\n        contacts: parsContacts,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"phonebook\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  handlerChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  onSaveContact = (newContact) => {\n    const { contacts } = this.state;\n    const newContactName = newContact.name.toUpperCase();\n\n    const knownContact = contacts.find(\n      ({ name }) => name.toUpperCase() === newContactName\n    );\n\n    if (knownContact) {\n      return alert(`${newContact.name} is already in contacts.`);\n    }\n\n    this.setState((prevState) => ({\n      contacts: [newContact, ...prevState.contacts],\n    }));\n  };\n\n  visibleContacts = () => {\n    const search = this.state.filter.toUpperCase();\n    return this.state.contacts.filter((contact) =>\n      contact.name.toUpperCase().includes(search)\n    );\n  };\n\n  deleteContact = (event) => {\n    let deleteID = event.currentTarget.dataset.id;\n\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(({ id }) => {\n        return id !== deleteID;\n      }),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n    const contactsList = this.visibleContacts();\n\n    return (\n      <div className=\"container\">\n        <h1>Phonebook</h1>\n        <ContactForm onSave={this.onSaveContact} />\n\n        <h2>Contacts</h2>\n        <Filter filter={filter} handlerChange={this.handlerChange} />\n        <ContactList list={contactsList} deleteContact={this.deleteContact} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"button\":\"ContactList_button__1RuFy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2DoVp\"};"],"sourceRoot":""}